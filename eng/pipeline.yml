#
# This file should be kept in sync across https://www.github.com/dotnet/wpf and dotnet-wpf-int repos. 
#
# 

parameters:


  # Needed because runAsPublic is used in template expressions, which can't read from user-defined variables
  # Defaults to true
  runAsPublic: true
  repoName: dnceng/dotnet-wpf-test

jobs:
- template: /eng/common/templates/jobs/jobs.yml
  parameters:
    enableMicrobuild: true
    enablePublishBuildArtifacts: true
    enablePublishTestResults: true
    enablePublishBuildAssets: true
    enablePublishUsingPipelines: $(_PublishUsingPipelines)
    enableTelemetry: false
    helixRepo: $(repoName)

    jobs:
    - job: Windows_NT
      timeoutInMinutes: 120 # how long to run the job before automatically cancelling; see https://github.com/dotnet/wpf/issues/952
      pool:
        # For public or PR jobs, use the hosted pool.  For internal jobs use the internal pool.
        # Will eventually change this to two BYOC pools.
        # Always use internal pool for dotnet-wpf-test builds
        ${{ if eq(variables['System.TeamProject'], 'public') }}:
          name: NetCore1ESPool-Public
          demands: ImageOverride -equals Build.Windows.Amd64.VS2022.Pre.Open
        ${{ if ne(variables['System.TeamProject'], 'public') }}:
          name: NetCore1ESPool-Internal
          demands: ImageOverride -equals Build.Windows.Amd64.VS2022.Pre
      variables:
        # needed for signing
        - name: _TeamName
          value: DotNetCore
        - name: _SignType
          value: test
        - name: _SignArgs
          value: ''

        # needed for darc (dependency flow) publishing
        - name: _PublishType
          value: none
        - name: _DotNetPublishToBlobFeed
          value: false
        - name: _PublishArgs
          value: ''
        - name: _OfficialBuildIdArgs
          value: ''
        - name: _Platform
          value: x86
        - name: _PlatformArgs
          value: /p:Platform=$(_Platform)

        # Override some values if we're building internally
        - ${{ if eq(parameters.runAsPublic, 'false') }}:
          # note: You have to use list syntax here (- name: value) or you will get errors about declaring the same variable multiple times
          - name: _PublishType
            value: blob
          - name: _SignType
            value: test
          - name: _DotNetPublishToBlobFeed
            value: true
          - group: DotNet-Blob-Feed
          - group: DotNet-Symbol-Server-Pats
          - name: _PublishBlobFeedUrl
            value: https://dotnetfeed.blob.core.windows.net/dotnet-windowsdesktop/index.json

          # note: Even though they are referenced here, user defined variables (like $(_SignType)) are not resolved 
          # until the agent is running on the machine. They can be overridden any time before they are resolved,
          # like in the job matrix below (see Build_Debug)
          - name: _SignArgs
            value: /p:DotNetSignType=$(_SignType) /p:TeamName=$(_TeamName)
          - name: _PublishArgs
            value: /p:DotNetPublishBlobFeedKey=$(dotnetfeed-storage-access-key-1)
              /p:DotNetPublishBlobFeedUrl=$(_PublishBlobFeedUrl)
              /p:DotNetPublishToBlobFeed=$(_DotNetPublishToBlobFeed)
              /p:DotNetPublishUsingPipelines=$(_PublishUsingPipelines)
              /p:DotNetArtifactsCategory=$(_DotNetArtifactsCategory)
              /p:DotNetSymbolServerTokenMsdl=$(microsoft-symbol-server-pat)
              /p:DotNetSymbolServerTokenSymWeb=$(symweb-symbol-server-pat)
          - name: _OfficialBuildIdArgs
            value: /p:OfficialBuildId=$(BUILD.BUILDNUMBER)
      strategy:
        matrix:
          Build_Debug_x86:
            _BuildConfig: Debug
            # override some variables for debug
            _PublishType: none
            _SignType: test
            _DotNetPublishToBlobFeed : false
          Build_Release_x86:
            _BuildConfig: Release
          Build_Debug_x64:
            _BuildConfig: Debug
            # override some variables for debug
            _PublishType: none
            _SignType: test
            _DotNetPublishToBlobFeed : false
            _Platform: x64
          Build_Release_x64:
            _BuildConfig: Release
            _Platform: x64
      steps:
      - checkout: self
        clean: true
      # Use utility script to run script command dependent on agent OS.
      - script: eng\common\cibuild.cmd
          -configuration $(_BuildConfig) 
          -prepareMachine
          $(_PublishArgs)
          $(_SignArgs)
          $(_OfficialBuildIdArgs)
          $(_PlatformArgs)
        displayName: Windows Build / Publish

      # Compress the test files in preparation of uploading 
      - task: PowerShell@2
        displayName: Compress Test Assemblies/Artifacts
        inputs:
          targetType: 'filePath'
          filePath: 'eng\compress-published-tests.ps1'
          arguments: -Configuration $(_BuildConfig) -Platform $(_Platform)
          errorActionPreference: continue
        condition: notin(variables['Build.Reason'], 'PullRequest')
            
      # Publish test files to the build server
      - task: PublishPipelineArtifact@1
        displayName: Publish Test Assemblies/Artifacts
        inputs:
          path: $(Build.SourcesDirectory)/artifacts/Tests/Tests.$(_BuildConfig).$(_Platform).zip
          artifactName: Tests.$(_BuildConfig).$(_Platform).zip
        condition: notin(variables['Build.Reason'], 'PullRequest')

